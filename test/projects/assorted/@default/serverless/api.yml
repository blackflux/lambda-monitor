provider:
  memorySize: 128
  environment:
    LOGGLY_TOKEN: ${ssm:LOGGLY_TOKEN}
    LOGZ_TOKEN: ${ssm:LOGZ_TOKEN}
    DATADOG_API_KEY: ${ssm:DATADOG_API_KEY}
    SENDGRID_API_KEY: ${ssm:SENDGRID_API_KEY}
    ROLLBAR_ACCESS_TOKEN: ${ssm:ROLLBAR_ACCESS_TOKEN}
    ROLLBAR_REPORT_LEVEL: ${ssm:ROLLBAR_REPORT_LEVEL}
    LOG_STREAM_BUCKET_NAME: ${cf:${opt:service}-data-${self:provider.stage}.LogStreamS3BucketName}
    LOG_BUCKET_NAME: ${cf:${opt:service}-data-${self:provider.stage}.LogS3BucketName}
    BATCHER_QUEUE_URL: ${cf:${opt:service}-data-${self:provider.stage}.BatcherQueueUrl}
    BUNDLER_QUEUE_URL: ${cf:${opt:service}-data-${self:provider.stage}.BundlerQueueUrl}
    CONFIG_FILEPATH: lib/config.json
  iamRoleStatements:
    - Effect: Allow
      Action:
        - tag:GetResources
        - logs:DescribeLogGroups
        - logs:DescribeSubscriptionFilters
        - logs:PutSubscriptionFilter
      Resource:
        - '*'
    - Effect: Allow
      Action:
        - lambda:GetFunction
      Resource:
        - Fn::Join:
            - ':'
            - - arn:aws:lambda
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - function
              - '*'
    - Effect: Allow
      Action:
        - s3:DeleteObject
      Resource:
        - >-
          arn:aws:s3:::${cf:${opt:service}-data-${self:provider.stage}.CloudTrailS3BucketName}/*
    - Effect: Allow
      Action:
        - s3:ListBucket
      Resource:
        - >-
          arn:aws:s3:::${cf:${opt:service}-data-${self:provider.stage}.CloudTrailS3BucketName}
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:DeleteObject
      Resource:
        - >-
          arn:aws:s3:::${cf:${opt:service}-data-${self:provider.stage}.LogStreamS3BucketName}/*
        - >-
          arn:aws:s3:::${cf:${opt:service}-data-${self:provider.stage}.LogS3BucketName}/*
    - Effect: Allow
      Action:
        - s3:ListBucket
      Resource:
        - >-
          arn:aws:s3:::${cf:${opt:service}-data-${self:provider.stage}.LogStreamS3BucketName}
        - >-
          arn:aws:s3:::${cf:${opt:service}-data-${self:provider.stage}.LogS3BucketName}
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:GetQueueAttributes
      Resource:
        - ${cf:${opt:service}-data-${self:provider.stage}.BatcherQueueArn}
        - >-
          ${cf:${opt:service}-data-${self:provider.stage}.BatcherDeadLetterQueueArn}
        - ${cf:${opt:service}-data-${self:provider.stage}.BundlerQueueArn}
        - >-
          ${cf:${opt:service}-data-${self:provider.stage}.BundlerDeadLetterQueueArn}
functions:
  process-logs:
    timeout: 30
    handler: lib/index.processLogs
    description: Processor for Lambda CloudWatch Streams
    tags:
      MONITOR: '1'
      MONITORED: '0'
      service: ${self:service}
      stage: ${self:provider.stage}
      resource: process-logs
  subscribe:
    timeout: 300
    handler: lib/index.subscribe
    description: Subscribe Processor to Lambda CloudWatch Streams
    events:
      - schedule: rate(1 hour)
      - cloudwatchEvent:
          event:
            source:
              - aws.logs
            detail-type:
              - AWS API Call via CloudTrail
            detail:
              eventSource:
                - logs.amazonaws.com
              eventName:
                - CreateLogGroup
    memorySize: 256
    tags:
      service: ${self:service}
      stage: ${self:provider.stage}
      resource: subscribe
  empty-bucket:
    timeout: 900
    handler: lib/index.emptyBucket
    description: Empty s3 bucket
    memorySize: 256
    tags:
      service: ${self:service}
      stage: ${self:provider.stage}
      resource: empty-bucket
  batcher-handler:
    memorySize: 512
    handler: lib/index.batcherHandler
    reservedConcurrency: 1
    timeout: 60
    tags:
      service: ${self:service}
      stage: ${self:provider.stage}
      resource: batcher-handler
      MONITORED: '0'
    events:
      - sqs:
          arn: ${cf:${opt:service}-data-${self:provider.stage}.BatcherQueueArn}
          batchSize: 1000
          maximumBatchingWindow: 300
  bundler-handler:
    memorySize: 512
    handler: lib/index.bundlerHandler
    reservedConcurrency: 1
    timeout: 60
    tags:
      MONITORED: '0'
      service: ${self:service}
      stage: ${self:provider.stage}
      resource: bundler-handler
    events:
      - sqs:
          arn: ${cf:${opt:service}-data-${self:provider.stage}.BundlerQueueArn}
          batchSize: 1000
          maximumBatchingWindow: 300
resources:
  Resources:
    LambdaInvokePermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: ${self:service}-${opt:env}-process-logs
        Principal: logs.${opt:region}.amazonaws.com
      DependsOn:
        - ProcessDashlogsLambdaFunction
    TriggerLambdaSubscribeResource:
      Type: Custom::LambdaDependency
      Properties:
        ServiceToken:
          Fn::GetAtt:
            - SubscribeLambdaFunction
            - Arn
      DependsOn:
        - LambdaInvokePermission
        - SubscribeLambdaFunction
        - ProcessDashlogsLambdaFunction
    EmptyCloudTrailS3Bucket:
      Type: Custom::LambdaDependency
      Properties:
        ServiceToken:
          Fn::GetAtt:
            - EmptyDashbucketLambdaFunction
            - Arn
        BucketName: >-
          ${cf:${opt:service}-data-${self:provider.stage}.CloudTrailS3BucketName}
      DependsOn:
        - EmptyDashbucketLambdaFunction
    CloudTrailS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: >-
          ${cf:${opt:service}-data-${self:provider.stage}.CloudTrailS3BucketName}
        PolicyDocument:
          Statement:
            - Sid: AWSCloudTrailAclCheck
              Effect: Allow
              Principal:
                Service: cloudtrail.amazonaws.com
              Action: s3:GetBucketAcl
              Resource:
                Fn::Join:
                  - ''
                  - - 'arn:aws:s3:::'
                    - >-
                      ${cf:${opt:service}-data-${self:provider.stage}.CloudTrailS3BucketName}
            - Sid: AWSCloudTrailWrite
              Effect: Allow
              Principal:
                Service: cloudtrail.amazonaws.com
              Action: s3:PutObject
              Resource:
                Fn::Join:
                  - ''
                  - - 'arn:aws:s3:::'
                    - >-
                      ${cf:${opt:service}-data-${self:provider.stage}.CloudTrailS3BucketName}
                    - /AWSLogs/
                    - Ref: AWS::AccountId
                    - /*
              Condition:
                StringEquals:
                  s3:x-amz-acl: bucket-owner-full-control
      DependsOn:
        - EmptyCloudTrailS3Bucket
    CloudTrail:
      Type: AWS::CloudTrail::Trail
      Properties:
        S3BucketName: >-
          ${cf:${opt:service}-data-${self:provider.stage}.CloudTrailS3BucketName}
        IsLogging: enableCloudTrail
      DependsOn:
        - CloudTrailS3BucketPolicy
<<<:
  - ${file(^/api/config.yml)}
